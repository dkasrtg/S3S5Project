package entity.materiau;


import com.genericdao.*;
import com.genericdao.annotation.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDateTime;


@Table( name = "mouvement_materiau" )
public class MouvementMateriau extends GenericDAO {

    public static final int ENTREE = 1;
    public static final int SORTIE = -1;

    @Id( autoGenerated = true)
	@Column( name = "id")
	private Integer id;

	@Column( name = "date_mouvement")
	private LocalDateTime dateMouvement;

	@Column( name = "id_materiau")
	private Integer idMateriau;

	@Column( name = "quantite")
	private Double quantite;

	@Column( name = "prix_unitaire")
	private Double prixUnitaire;

	@Column( name = "type_mouvement")
	private Integer typeMouvement;

	@Column( name = "id_mouvement_mere")
	private Integer idMouvementMere;

	@Column( name = "description")
	private String description;

	@Column( name = "id_mouvement_meuble")
	private Integer idMouvementMeuble;

	

    public MouvementMateriau() {

    }

    public MouvementMateriau(Integer id, LocalDateTime dateMouvement, Integer idMateriau, Double quantite, Double prixUnitaire, Integer typeMouvement, Integer idMouvementMere, String description, Integer idMouvementMeuble) {
        setId(id);
		setDateMouvement(dateMouvement);
		setIdMateriau(idMateriau);
		setQuantite(quantite);
		setPrixUnitaire(prixUnitaire);
		setTypeMouvement(typeMouvement);
		setIdMouvementMere(idMouvementMere);
		setDescription(description);
		setIdMouvementMeuble(idMouvementMeuble);
		
    }

    public void setId(Integer id) {
		this.id = id;
	}

	public Integer getId() {
		return id;
	}

	public void setDateMouvement(LocalDateTime dateMouvement) {
		this.dateMouvement = dateMouvement;
	}

	public LocalDateTime getDateMouvement() {
		return dateMouvement;
	}

	public void setIdMateriau(Integer idMateriau) {
		this.idMateriau = idMateriau;
	}

	public Integer getIdMateriau() {
		return idMateriau;
	}

	public void setQuantite(Double quantite) {
		this.quantite = quantite;
	}

	public Double getQuantite() {
		return quantite;
	}

	public void setPrixUnitaire(Double prixUnitaire) {
		this.prixUnitaire = prixUnitaire;
	}

	public Double getPrixUnitaire() {
		return prixUnitaire;
	}

	public void setTypeMouvement(Integer typeMouvement) {
		this.typeMouvement = typeMouvement;
	}

	public Integer getTypeMouvement() {
		return typeMouvement;
	}

	public void setIdMouvementMere(Integer idMouvementMere) {
		this.idMouvementMere = idMouvementMere;
	}

	public Integer getIdMouvementMere() {
		return idMouvementMere;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getDescription() {
		return description;
	}

	public void setIdMouvementMeuble(Integer idMouvementMeuble) {
		this.idMouvementMeuble = idMouvementMeuble;
	}

	public Integer getIdMouvementMeuble() {
		return idMouvementMeuble;
	}

    public static LocalDateTime getLastOutMouvementDate(Connection connection) throws Exception {
        String query = "SELECT MAX(date_mouvement) AS last_date FROM mouvement_materiau WHERE type_mouvement=-1";
        PreparedStatement statement = connection.prepareStatement(query);
        ResultSet resultSet = statement.executeQuery();
        if (resultSet.next()) {
            LocalDateTime result = resultSet.getObject("last_date", LocalDateTime.class);
            if (result != null) {
                return result;
            }
        }
        return LocalDateTime.of(1, 1, 1, 0, 0);
    }

}