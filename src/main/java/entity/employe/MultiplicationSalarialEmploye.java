package entity.employe;


import com.genericdao.*;
import com.genericdao.annotation.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDateTime;


@Table( name = "multiplication_salarial_employe" )
public class MultiplicationSalarialEmploye extends GenericDAO {

    @Id( autoGenerated = true)
	@Column( name = "id")
	private Integer id;

	@Column( name = "id_poste")
	private Integer idPoste;

	@Column( name = "id_niveau_depart")
	private Integer idNiveauDepart;

	@Column( name = "id_niveau_arrive")
	private Integer idNiveauArrive;

	@Column( name = "multipliant")
	private Double multipliant;

	@Column( name = "date_debut")
	private LocalDateTime dateDebut;

	@Column( name = "date_fin")
	private LocalDateTime dateFin;

	

    public MultiplicationSalarialEmploye() {

    }

    public MultiplicationSalarialEmploye(Integer id, Integer idPoste, Integer idNiveauDepart, Integer idNiveauArrive, Double multipliant, LocalDateTime dateDebut, LocalDateTime dateFin) {
        setId(id);
		setIdPoste(idPoste);
		setIdNiveauDepart(idNiveauDepart);
		setIdNiveauArrive(idNiveauArrive);
		setMultipliant(multipliant);
		setDateDebut(dateDebut);
		setDateFin(dateFin);
		
    }

    public void setId(Integer id) {
		this.id = id;
	}

	public Integer getId() {
		return id;
	}

	public void setIdPoste(Integer idPoste) {
		this.idPoste = idPoste;
	}

	public Integer getIdPoste() {
		return idPoste;
	}

	public void setIdNiveauDepart(Integer idNiveauDepart) {
		this.idNiveauDepart = idNiveauDepart;
	}

	public Integer getIdNiveauDepart() {
		return idNiveauDepart;
	}

	public void setIdNiveauArrive(Integer idNiveauArrive) {
		this.idNiveauArrive = idNiveauArrive;
	}

	public Integer getIdNiveauArrive() {
		return idNiveauArrive;
	}

	public void setMultipliant(Double multipliant) {
		this.multipliant = multipliant;
	}

	public Double getMultipliant() {
		return multipliant;
	}

	public void setDateDebut(LocalDateTime dateDebut) {
		this.dateDebut = dateDebut;
	}

	public LocalDateTime getDateDebut() {
		return dateDebut;
	}

	public void setDateFin(LocalDateTime dateFin) {
		this.dateFin = dateFin;
	}

	public LocalDateTime getDateFin() {
		return dateFin;
	}

	public static MultiplicationSalarialEmploye selectByIdPosteNiveauDepartNiveauArriveDateFin(
			Connection connection, Integer idPoste, Integer idNiveauDepart, Integer idNiveauArrive,
			LocalDateTime dateFin)
			throws Exception {
		MultiplicationSalarialEmploye multiplicationSalarialEmploye = null;
		String query = "SELECT * FROM multiplication_salarial_employe WHERE id_poste = ? AND id_niveau_depart = ? AND id_niveau_arrive = ? AND date_fin = ?";
		PreparedStatement statement = connection.prepareStatement(query);
		statement.setInt(1, idPoste);
		statement.setInt(2, idNiveauDepart);
		statement.setInt(3, idNiveauArrive);
		statement.setObject(4, dateFin);
		ResultSet resultSet = statement.executeQuery();
		if (resultSet.next()) {
			multiplicationSalarialEmploye = new MultiplicationSalarialEmploye(
					resultSet.getInt("id"),
					resultSet.getInt("id_poste"),
					resultSet.getInt("id_niveau_depart"),
					resultSet.getInt("id_niveau_arrive"),
					resultSet.getDouble("multipliant"),
					resultSet.getTimestamp("date_debut").toLocalDateTime(),
					resultSet.getTimestamp("date_fin").toLocalDateTime());
		}
		statement.close();
		resultSet.close();
		return multiplicationSalarialEmploye;
	}	

}