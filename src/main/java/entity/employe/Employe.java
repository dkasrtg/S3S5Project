package entity.employe;

import com.genericdao.*;
import com.genericdao.annotation.*;

import exception.DateAfterNowException;
import exception.FieldEmptyException;
import exception.LessThan18Exception;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

@Table(name = "employe")
public class Employe extends GenericDAO {

	@Id(autoGenerated = true)
	@Column(name = "id")
	private Integer id;

	@Column(name = "nom")
	private String nom;

	@Column(name = "prenom")
	private String prenom;

	@Column(name = "date_naissance")
	private LocalDate dateNaissance;

	@Column(name = "id_genre")
	private Integer idGenre;

	@Column(name = "date_entree")
	private LocalDateTime dateEntree;

	public Employe() {

	}

	public Employe(Integer id, String nom, String prenom, LocalDate dateNaissance, Integer idGenre,
			LocalDateTime dateEntree) throws Exception{
		setId(id);
		setNom(nom);
		setPrenom(prenom);
		setDateNaissance(dateNaissance);
		setIdGenre(idGenre);
		setDateEntree(dateEntree);

	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Integer getId() {
		return id;
	}

	public void setNom(String nom) throws Exception{
		if (nom.trim().isEmpty()) {
			throw new FieldEmptyException("Nom");
		}
		this.nom = nom;
	}

	public String getNom() {
		return nom;
	}

	public void setPrenom(String prenom) {
		this.prenom = prenom;
	}

	public String getPrenom() {
		return prenom;
	}

	public void setDateNaissance(LocalDate dateNaissance) throws Exception{
		if (dateNaissance.isAfter(LocalDate.now())) {
			throw new DateAfterNowException();
		}
		if (ChronoUnit.YEARS.between(dateNaissance, LocalDate.now())<18) {
			throw new LessThan18Exception();
		}
		this.dateNaissance = dateNaissance;
	}

	public LocalDate getDateNaissance() {
		return dateNaissance;
	}

	public void setIdGenre(Integer idGenre) {
		this.idGenre = idGenre;
	}

	public Integer getIdGenre() {
		return idGenre;
	}

	public void setDateEntree(LocalDateTime dateEntree) throws Exception{
		if (dateEntree.isAfter(LocalDateTime.now())) {
			throw new DateAfterNowException();
		}
		this.dateEntree = dateEntree;
	}

	public LocalDateTime getDateEntree() {
		return dateEntree;
	}

}