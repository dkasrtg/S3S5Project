package entity.meuble;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDateTime;
import java.util.List;

import com.genericdao.GenericDAO;
import com.genericdao.annotation.Column;
import com.genericdao.annotation.Id;
import com.genericdao.annotation.Table;

@Table(name = "mouvement_meuble")
public class MouvementMeuble extends GenericDAO {

    public static final int ENTREE = 1;
    public static final int SORTIE = -1;

    @Id(autoGenerated = true)
    @Column(name = "id")
    private Integer id;

    @Column(name = "date_mouvement")
    private LocalDateTime dateMouvement;

    @Column(name = "id_formule_meuble")
    private Integer idFormuleMeuble;

    @Column(name = "quantite")
    private Double quantite;

    @Column(name = "type_mouvement")
    private Integer typeMouvement;

    @Column(name = "id_mouvement_mere")
    private Integer idMouvementMere;

    @Column(name = "total_materiaux")
    private Double totalMateriaux;

    @Column(name = "total_salaires")
    private Double totalSalaires;

    @Column(name = "prix_total")
    private Double prixTotal;

    @Column(name = "prix_unitaire")
    private Double prixUnitaire;

    @Column(name = "id_detail_vente_meuble")
    private Integer idDetailVenteMeuble;

    @Column(name = "description")
    private String description;

    public MouvementMeuble() {

    }

    public MouvementMeuble(Integer id, LocalDateTime dateMouvement, Integer idFormuleMeuble, Double quantite,
            Integer typeMouvement, Integer idMouvementMere, Double totalMateriaux, Double totalSalaires,
            Double prixTotal, Double prixUnitaire, Integer idDetailVenteMeuble, String description) {
        setId(id);
        setDateMouvement(dateMouvement);
        setIdFormuleMeuble(idFormuleMeuble);
        setQuantite(quantite);
        setTypeMouvement(typeMouvement);
        setIdMouvementMere(idMouvementMere);
        setTotalMateriaux(totalMateriaux);
        setTotalSalaires(totalSalaires);
        setPrixTotal(prixTotal);
        setPrixUnitaire(prixUnitaire);
        setIdDetailVenteMeuble(idDetailVenteMeuble);
        setDescription(description);

    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getId() {
        return id;
    }

    public void setDateMouvement(LocalDateTime dateMouvement) {
        this.dateMouvement = dateMouvement;
    }

    public LocalDateTime getDateMouvement() {
        return dateMouvement;
    }

    public void setIdFormuleMeuble(Integer idFormuleMeuble) {
        this.idFormuleMeuble = idFormuleMeuble;
    }

    public Integer getIdFormuleMeuble() {
        return idFormuleMeuble;
    }

    public void setQuantite(Double quantite) {
        this.quantite = quantite;
    }

    public Double getQuantite() {
        return quantite;
    }

    public void setTypeMouvement(Integer typeMouvement) {
        this.typeMouvement = typeMouvement;
    }

    public Integer getTypeMouvement() {
        return typeMouvement;
    }

    public void setIdMouvementMere(Integer idMouvementMere) {
        this.idMouvementMere = idMouvementMere;
    }

    public Integer getIdMouvementMere() {
        return idMouvementMere;
    }

    public void setTotalMateriaux(Double totalMateriaux) {
        this.totalMateriaux = totalMateriaux;
    }

    public Double getTotalMateriaux() {
        return totalMateriaux;
    }

    public void setTotalSalaires(Double totalSalaires) {
        this.totalSalaires = totalSalaires;
    }

    public Double getTotalSalaires() {
        return totalSalaires;
    }

    public void setPrixTotal(Double prixTotal) {
        this.prixTotal = prixTotal;
    }

    public Double getPrixTotal() {
        return prixTotal;
    }

    public void setPrixUnitaire(Double prixUnitaire) {
        this.prixUnitaire = prixUnitaire;
    }

    public Double getPrixUnitaire() {
        return prixUnitaire;
    }

    public void setIdDetailVenteMeuble(Integer idDetailVenteMeuble) {
        this.idDetailVenteMeuble = idDetailVenteMeuble;
    }

    public Integer getIdDetailVenteMeuble() {
        return idDetailVenteMeuble;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getDescription() {
        return description;
    }

    public static LocalDateTime getLastOutMouvementDate(Connection connection) throws Exception {
        String query = "SELECT MAX(date_mouvement) AS last_date FROM mouvement_meuble WHERE type_mouvement=-1";
        PreparedStatement statement = connection.prepareStatement(query);
        ResultSet resultSet = statement.executeQuery();
        if (resultSet.next()) {
            LocalDateTime result = resultSet.getObject("last_date", LocalDateTime.class);
            if (result != null) {
                return result;
            }
        }
        return LocalDateTime.of(1, 1, 1, 0, 0);
    }

    public static List<MouvementMeuble> selectByIdMouvementMere(Connection connection, Integer idMouvementMere) throws Exception {
        String query = "select * from mouvement_meuble where id_mouvement_mere = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setInt(1, idMouvementMere);
        return MouvementMeuble.selectMultipleByPreparedStatement(MouvementMeuble.class, preparedStatement, connection);
    }

}